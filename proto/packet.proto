syntax = "proto3";

package ProtoNet;

enum PacketType {
  Invalid = 0;
  Error = 1;
  BeginHandshake = 2;
  AcceptHandshake = 3;
  CompleteHandshake = 4;
  Begin = 5;
}

enum ErrorType {
  Generic = 0;
  InvalidVersion = 1;
  InvalidUsername = 2;
  InvalidPassword = 3;
}

message Packet {
  PacketType type = 1;
  bytes data = 2;

  // Ticket is used for "callback" like requests
  uint32 ticket = 3;
}

message ISession {
  string server = 1;
  bytes session = 2;
}

message IPoint {
  float x = 1;
  float y = 2;
  float z = 3;
}

message IBoundingBox {
  IPoint min = 1;
  IPoint max = 2;
}

message IBlockType {
  uint32 id = 1;
  string name = 2;
}

message IWorld {
  uint64 id = 1;
  string name = 2;

  repeated IBlockType blocks = 3;
}

message IRegion {
  uint64 world = 1;
  IBoundingBox box = 2;

  repeated uint32 blocks = 3;
}

message PacketError {
  ErrorType type = 1;
  string msg = 2;
}

/*
  This packet sends a small amount of information to the server requesting a new game
  session be established.
*/
message PacketBeginHandshake {
  // Username is provided for servers that do not require session authentication
  string username = 1;

  // The fingerprint of this user.
  bytes fingerprint = 2;

  // Current protocol version we are attempting to handshake with
  uint32 version = 3;

  // Client session
  ISession session = 4;
}

/*
  This packet responds to BeginHandshake sending the servers session information, and a new
  ID for this session.
*/
message PacketAcceptHandshake {
  // A unique ID for this session
  uint64 id = 1;

  // Server session
  ISession session = 2;

  // Is this server password protected??
  bool password = 3;

  // The challenge string
  string challenge = 4;
}


/*
  Final step in the three-way handshake, client expresses intent to fully join the server.
*/
message PacketCompleteHandshake {
  // Should be set if the server is password protected
  string password = 1;

  // Solution to the challenge
  string solution = 2;

  // TODO: mod information goes here
}

/*
  Sends intial information required for the client to be part of the server...
*/
message PacketBegin {
  // Send information about the current world
  IWorld world = 1;

  // Send the current location
  IPoint pos = 2;
}
